<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL selcet 默认值</title>
    <url>/2019/04/17/MySQL-selcet-%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title=" "></a> </h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, <span class="number">0</span> <span class="keyword">as</span> age, <span class="string">'xiaoxue'</span> <span class="keyword">as</span> schoole  <span class="keyword">FROM</span> table_name ;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>-MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 使用timestamp的坑</title>
    <url>/2020/05/29/MySQL-%E4%BD%BF%E7%94%A8timestamp%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>在创建表的时候 created_at 跟 updated_at 字段都使用了 timestamp 字段来进行存储。<br>数据库版本是 <code>5.7.26</code><br>一开始的语句是这样的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table `test` (</span><br><span class="line">    #...</span><br><span class="line">    created_at timestamp,</span><br><span class="line">    updated_at timestamp</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>但是报错</p>
<blockquote>
<p>1067 - Invalid default value for ‘updated_at’</p>
</blockquote>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table `test` (</span><br><span class="line">    #...</span><br><span class="line">    created_at timestamp null,</span><br><span class="line">    updated_at timestamp null</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>解决问题</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel整合umijs踩坑之旅</title>
    <url>/2019/12/28/larave-umijs/</url>
    <content><![CDATA[<p>  <a href="https://laravel.com" target="_blank" rel="noopener">Laravel</a>:The PHP Framework for Web Artisans<br>  <a href="https://umijs.org/zh/" target="_blank" rel="noopener">UmiJS</a>：可插拔的企业级 react 应用框架。</p>
<p>　　身为一个PHP的小学生，在一次学习Laravel-admin的过程中发现了一款非常优雅的插件(<a href="https://github.com/SmallRuralDog/laravel-b2c-store" target="_blank" rel="noopener">B2C商城扩展</a>)中将两者完美的结合在一起。所以，我把他下载了下来进行学习。就有了这篇踩坑之旅</p>
<h2 id="安装antd-admin"><a href="#安装antd-admin" class="headerlink" title="安装antd-admin"></a>安装<a href="https://github.com/zuiidea/antd-admin" target="_blank" rel="noopener">antd-admin</a></h2><p>　　虽然说的是Umi.js，但是如果我们去官网去看，就会发现跟我们插件所使用的根本不一样。<br>　　我们真正使用的是[antd-admin] 这个umi框架。</p>
<p>   安装流程：<br>   <img src="https://s2.ax1x.com/2019/12/29/lncqpj.jpg" alt="install-umi"></p>
<h2 id="在Laravel中配置umi"><a href="#在Laravel中配置umi" class="headerlink" title="在Laravel中配置umi"></a>在Laravel中配置umi</h2><h4 id="在Laravel-中新建一个控制器"><a href="#在Laravel-中新建一个控制器" class="headerlink" title="在Laravel 中新建一个控制器"></a>在Laravel 中新建一个控制器</h4>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Admin</span>\<span class="title">Controllers</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">umi</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> view(<span class="string">'view/umi'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="视图模板文件中写入以下代码"><a href="#视图模板文件中写入以下代码" class="headerlink" title="视图模板文件中写入以下代码"></a>视图模板文件中写入以下代码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">myUmi</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有配置umi 则走本地的umi</span></span><br><span class="line">        <span class="keyword">if</span> (env(<span class="string">'UMI'</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="comment">//8000端口是我们本地 umi 的端口号</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'//localhost:8000/'</span> . $path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> \Illuminate\Support\Str::finish(asset(<span class="string">'vendor/umi/'</span>), <span class="string">'/'</span>) . $path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;link rel=<span class="string">"manifest"</span> href=<span class="string">"&#123;&#123;Helper::myUmi('manifest.json')&#125;&#125;"</span>&gt;</span><br><span class="line">      &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;&#123;Helper::myUmi('umi.css')&#125;&#125;"</span>&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">      &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">      &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0"</span>&gt;</span><br><span class="line">      &lt;title&gt;&#123;&#123;config(<span class="string">'store.title'</span>)&#125;&#125;&lt;/title&gt;</span><br><span class="line">      &lt;meta name=<span class="string">"csrf-token"</span> content=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span><br><span class="line">      &lt;link rel=<span class="string">"icon"</span> href=<span class="string">"&#123;&#123;Helper::myUmi('favicon.png')&#125;&#125;"</span> type=<span class="string">"image/x-icon"</span>&gt;</span><br><span class="line">      &lt;script src=<span class="string">"https://gw.alipayobjects.com/os/antv/pkg/_antv.data-set-0.9.6/dist/data-set.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        window.routerBase = <span class="string">"/"</span>;</span><br><span class="line">        window.publicPath = <span class="string">"&#123;&#123;Helper::myUmi('')&#125;&#125;"</span>;</span><br><span class="line">        window.store = &#123;</span><br><span class="line">          title: <span class="string">"&#123;&#123;config('store.title')&#125;&#125;"</span>,</span><br><span class="line">          token: <span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">      &lt;script async src=<span class="string">"&#123;&#123;Helper::myUmi('pwacompat.min.js')&#125;&#125;"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;noscript&gt;Sorry, we need js to run correctly!&lt;/noscript&gt;</span><br><span class="line">  &lt;div id=<span class="string">"root"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script src=<span class="string">"&#123;&#123;Helper::myUmi('umi.js')&#125;&#125;"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="修改-umi-的-package-json-文件"><a href="#修改-umi-的-package-json-文件" class="headerlink" title="修改 umi 的 package.json 文件"></a>修改 umi 的 package.json 文件</h4><p>  　　经过以上两步，当我们访问到 <a href="http://domain.com/View/um" target="_blank" rel="noopener">http://domain.com/View/um</a> 时可以看到 umi 的页面了。<br>  　　但是，页面会一直提示 Disconnect 不断刷新重连。</p>
<p>  解决方法：修改 antd-admin 的 package.json 中的以下信息。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"cross-env APP_TYPE=site PORT=8000 SOCKET_SERVER=none umi dev"</span>,</span><br><span class="line"><span class="string">"start:no-mock"</span>: <span class="string">"cross-env MOCK=none PORT=8000 SOCKET_SERVER=none umi dev"</span>,</span><br></pre></td></tr></table></figure></p>
<p>  参考文档<a href="https://blog.csdn.net/violetjack0808/article/details/86577776" target="_blank" rel="noopener">https://blog.csdn.net/violetjack0808/article/details/86577776</a>;</p>
<h4 id="修改-antd-admin-的-request-方法"><a href="#修改-antd-admin-的-request-方法" class="headerlink" title="修改 antd-admin 的 request 方法"></a>修改 antd-admin 的 request 方法</h4><p>  将 antd-amin/src/utils/request.ts 做如下修改<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = extend(&#123;</span><br><span class="line">  <span class="comment">//前缀</span></span><br><span class="line">  <span class="comment">//可以进行接口的版本控制</span></span><br><span class="line">  prefix: <span class="string">'/api/v1/'</span>,</span><br><span class="line">  <span class="comment">//设置header头</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'X-CSRF-TOKEN'</span>: <span class="built_in">window</span>.store.token,</span><br><span class="line">  &#125;,</span><br><span class="line">  errorHandler, <span class="comment">// 默认错误处理</span></span><br><span class="line">  credentials: <span class="string">'include'</span>, <span class="comment">// 默认请求是否带上cookie</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="修改-ant-admin-的登录验证"><a href="#修改-ant-admin-的登录验证" class="headerlink" title="修改 ant-admin 的登录验证"></a>修改 ant-admin 的登录验证</h4><p>  在 Laravel 中增加一个获取当前用户的接口/路由<br>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by PhpStorm.</span></span><br><span class="line"><span class="comment">* User: 张大猛子呦 &lt;hetaoov<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment">* Date: 2019/12/5</span></span><br><span class="line"><span class="comment">* Time: 9:05 下午</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Admin</span>\<span class="title">Controllers</span>\<span class="title">api</span>\<span class="title">v1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//用户登录</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">currentUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">      $user = \Admin::user();</span><br><span class="line">      <span class="keyword">return</span> $user;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>  antd-admin/src/layouts/SecurityLayout.tsx 做如下修改<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">   <span class="comment">//...code</span></span><br><span class="line">   <span class="keyword">const</span> isLogin = currentUser &amp;&amp; currentUser.id;</span><br><span class="line">   <span class="comment">//...code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p> 　　打开我们一开始 /view/umi 路由就可以看到 umi 的欢迎页面了<br><img src="https://s2.ax1x.com/2019/12/29/lK8VTx.jpg" alt="laravel-umi.jpg"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>JS</tag>
        <tag>React</tag>
        <tag>umi.js</tag>
      </tags>
  </entry>
  <entry>
    <title>React踩坑</title>
    <url>/2020/05/04/React%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>常用工具国内源</title>
    <url>/2020/04/09/php-node%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="brew-更新源"><a href="#brew-更新源" class="headerlink" title="brew 更新源"></a>brew 更新源</h3><p>阿里云<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git</span></span><br><span class="line"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line"> git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"> <span class="comment"># 替换homebrew-core.git</span></span><br><span class="line"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line"> git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"> <span class="comment"># 刷新源</span></span><br><span class="line"> brew update</span><br></pre></td></tr></table></figure></p>
<p>清华源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="comment"># 替换homebrew-core.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"><span class="comment"># 刷新源</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure></p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="composer"><a href="#composer" class="headerlink" title="composer"></a><a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener">composer</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">'https://registry.npm.taobao.org'</span></span><br></pre></td></tr></table></figure>
<h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry <span class="string">'https://registry.npm.taobao.org'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>仿Vue.js实现数据绑定</title>
    <url>/2020/01/05/%E4%BB%BFVue-js%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>之前在微信公众号上看到一篇文章<a href="!https://mp.weixin.qq.com/s/1wPePhAoBtsb0XcUzFSfug">《Vue.js是如何做到数据响应的？》</a>详细讲解了Vue.js实现数据响应的基本原理，非常的不错。但是，因为是微信公众号所以不利于搜索引擎的抓取，怕以后找不到，所以在自己的博客中再次的记载下。</p>
<p> 核心思想</p>
<ul>
<li>class</li>
<li>对象的 defineProperty 属性</li>
<li>观察者模式</li>
</ul>
<p>完整示例代码:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定的数据</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="string">"pirce"</span> : <span class="number">10</span>,</span><br><span class="line">  <span class="string">"quantity"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="string">"total"</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标函数寄存器</span></span><br><span class="line"><span class="keyword">let</span> target = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间寄存器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers = []</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span>(target &amp;&amp; !<span class="keyword">this</span>.subscribers.includes(target))&#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.push(target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//利用 Objeect.defineProperty 属性给data中的每个key都绑定上 set() , get() 方法</span></span><br><span class="line"><span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> internalValue = data[key]</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">     internalValue = newValue</span><br><span class="line">     dep.depend()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="keyword">get</span> () &#123;</span><br><span class="line">     dep.notify()</span><br><span class="line">     <span class="keyword">return</span> internalValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watcher</span>(<span class="params">funName</span>) </span>&#123;</span><br><span class="line">  target = funName</span><br><span class="line">  target()</span><br><span class="line">  target = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watcher(<span class="function"><span class="params">()</span> =&gt;</span> data.total = data.pirce * data.quantity)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.total)</span><br><span class="line">data.quantity = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(data.total)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>php依赖注入容器2</title>
    <url>/2020/03/20/php%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%AE%B9%E5%99%A82/</url>
    <content><![CDATA[<p>上一篇文章中，我们了解了什么是依赖注入，依赖注入有什么有点，以及一个简单的实现。<br>本篇文章，我们来优化一下 容器，使他更加的智能，以及优雅。</p>
<p>示例代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对 Container 类进行优化</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $s = <span class="keyword">array</span>();</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($k, $c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;s[$k] = $c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//return $this-&gt;s[$k]($this);</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;build(<span class="keyword">$this</span>-&gt;s[$k]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自动绑定，自动解析</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($className)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//是否是闭包函数</span></span><br><span class="line">		<span class="keyword">if</span>($className <span class="keyword">instanceof</span> Closure)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> $className(<span class="keyword">$this</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//使用反射类来操作</span></span><br><span class="line">		$reflector = <span class="keyword">new</span> ReflectionClass($className);		</span><br><span class="line">		<span class="comment">//检查类是否可以进行实例话，排除 抽象类（abstract） 和 接口（interface）</span></span><br><span class="line">		<span class="keyword">if</span>(!$reflector-&gt;isInstantiable())&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Can't  instantiate class"</span>.$className, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取类的构造函数</span></span><br><span class="line">		$constructor = $reflector-&gt;getConstructor(); </span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span>(is_null($constructor))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> $className;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取构造函数参数</span></span><br><span class="line">		$params = $constructor-&gt;getParameters();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//递归解析构造函数的参数</span></span><br><span class="line">		$dependencies = <span class="keyword">$this</span>-&gt;getDependencies($params);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建一个新的实例，给出的参数传递到类的构造函数</span></span><br><span class="line">		<span class="keyword">return</span> $reflector-&gt;newInstanceArgs($dependencies);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取构造函数的参数</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDependencies</span><span class="params">($params)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		$dependencies = [];</span><br><span class="line">		<span class="keyword">foreach</span> ($params <span class="keyword">as</span> $param) &#123;</span><br><span class="line">			$dependency = $param-&gt;getClass();</span><br><span class="line">			<span class="comment">//不是类，是变量，有默认值则设置默认值</span></span><br><span class="line">			<span class="keyword">if</span>(is_null($dependency))&#123;</span><br><span class="line">				$dependencies[] = <span class="keyword">$this</span>-&gt;resolveNonClass($param);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//是一个类，则递归解析</span></span><br><span class="line">				$dependencies[] = <span class="keyword">$this</span>-&gt;build($dependency-&gt;name);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> $dependencies;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取构造函数中的默认值</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveNonClass</span><span class="params">($param)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//有默认值则返回默认</span></span><br><span class="line">		<span class="keyword">if</span>($param-&gt;isDefaultValueAvailable())&#123;</span><br><span class="line">			<span class="keyword">return</span> $param-&gt;getDefaultValue();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"I have no idea what to do here."</span>, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	$c = <span class="keyword">new</span> Container();</span><br><span class="line"></span><br><span class="line">	$c -&gt; a = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line">	$c-&gt;a-&gt;message();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//print</span></span><br><span class="line">	<span class="comment">//辣鸡，没有我你们行不</span></span><br><span class="line">	<span class="comment">//哈哈，你离不开我吧</span></span><br><span class="line">	<span class="comment">//卑微小A[Finished in 0.0s]</span></span><br></pre></td></tr></table></figure></p>
<p>这里，我们可以看到，调用A的的时候更加的方便了，我们需要再A的构造函数中定义好我们需要的类。Container 就可以根据我们的构造函数自动加载我们所需要的依赖。</p>
<blockquote>
<p>tips: Container类中，使用了 PHP <a href="https://www.php.net/manual/zh/class.reflectionclass.php" target="_blank" rel="noopener">类的反射</a>。有兴趣的朋友可以了解一下。</p>
</blockquote>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>php依赖注入容器</title>
    <url>/2020/03/19/php%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>最近在学习使用Laravel，对Laravel中容器的概念很感兴趣，所以写一篇博客来学习一下。</p>
<p>什么是依赖注入?</p>
<blockquote>
<p>把有依赖关系的类放到容器中，解析出这些类的实例，就是依赖注入。目的是实现类的解耦</p>
</blockquote>
<p>实例</p>
<blockquote>
<p>Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。<br>采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。</p>
</blockquote>
<p>一般情况下的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(B $b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;b-&gt;say();</span><br><span class="line">		<span class="comment">//code</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'卑微小A'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(C $c)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;c = $c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;c-&gt;taunt();</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'哈哈，你离不开我吧'</span>.PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">taunt</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'辣鸡，没有我你们行不'</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> C();</span><br><span class="line">$b = <span class="keyword">new</span> B($c);</span><br><span class="line">$a = <span class="keyword">new</span> A($b);</span><br><span class="line">$a-&gt;message();</span><br></pre></td></tr></table></figure>
<p>从上面的示例来看，有一个明显的问题，就是如果一个顶层的类A依赖太多的底层类B，C时，代码会非常的多，而且还会一不小心搞错依赖顺序，不够优雅。</p>
<p>这个时候，我们来思考下有没有什么办法能自动解决这些依赖，来优雅的书写这些代码？这个方法就是我们今天的主题，依赖注入（DI）</p>
<p>废话不多说，先来个示例代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个容器</span></span><br><span class="line"><span class="comment">//代码来自 https://github.com/fabpot-graveyard/twittee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> $s=<span class="keyword">array</span>();</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($k, $c)</span> </span>&#123; <span class="keyword">$this</span>-&gt;s[$k]=$c; &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($k)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;s[$k](<span class="keyword">$this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用容器来请求方法。</span></span><br><span class="line">$container = <span class="keyword">new</span> Container();</span><br><span class="line">$container-&gt;c = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">&#125;; </span><br><span class="line">$container-&gt;b = <span class="function"><span class="keyword">function</span> <span class="params">($class)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> B($class-&gt;c);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">$container-&gt;a = <span class="function"><span class="keyword">function</span> <span class="params">($class)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> A($class-&gt;b);</span><br><span class="line">&#125;;</span><br><span class="line">$container-&gt;a-&gt;message();</span><br><span class="line"><span class="comment">//print:</span></span><br><span class="line"><span class="comment">//辣鸡，没有我你们行不</span></span><br><span class="line"><span class="comment">//哈哈，你离不开我吧</span></span><br><span class="line"><span class="comment">//卑微小A[Finished in 0.0s]</span></span><br></pre></td></tr></table></figure></p>
<p>上面是最简单的容器实现代码以及使用。从上面的代码来看，确实比之前优雅了许多，在同一个进程中，所有的方法都只需要在容器中实例化一次，之后，在任何的地方，都可以直接调用，而不用再关心依赖。</p>
<p>到这里，一个简单的 DI 容器就实现好了。但是，我们还是希望它能够更加的智能。比如：</p>
<ul>
<li>自动绑定（AutoWiring） 或 自动解析（Automatic Resolution）</li>
<li>注释解析器（Annotations）</li>
<li>延迟注入（Lazy injection）</li>
</ul>
<p>我们下期再来一起探讨。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>postman设置jwt所需的header头</title>
    <url>/2020/06/07/postman%E8%AE%BE%E7%BD%AEjwt%E6%89%80%E9%9C%80%E7%9A%84header%E5%A4%B4/</url>
    <content><![CDATA[<p>PostMan是一款非常好用的API接口调试工具。</p>
<p>在我们</p>
]]></content>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手umi.js-1</title>
    <url>/2020/02/12/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bumi-js1/</url>
    <content><![CDATA[<p>学习 UmiJS 也有一段时间了，终于了解了大概的用法，这里做个记录，也给刚入门的朋友提供一点参考。</p>
<h2 id="知识图谱："><a href="#知识图谱：" class="headerlink" title="知识图谱："></a>知识图谱：<img src="https://s2.ax1x.com/2020/02/12/17Xq56.png" alt="知识图谱"></h2><h2 id="快速上手-UmiJS-实操"><a href="#快速上手-UmiJS-实操" class="headerlink" title="快速上手 UmiJS 实操"></a>快速上手 UmiJS 实操</h2><h3 id="必要知识"><a href="#必要知识" class="headerlink" title="必要知识"></a>必要知识</h3><p>   这里我们需要一定的 React 和 ES6 的知识</p>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="下载umijs"><a href="#下载umijs" class="headerlink" title="下载umijs"></a>下载umijs</h4><p>参考官网的说明 <a href="https://umijs.org/zh/guide/getting-started.html#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87" target="_blank" rel="noopener">环境准备</a></p>
<p>这里我们假设您本地已经安装好了nodejs 等环境。<br>我们已 Antd Admin 为演示用例</p>
<p>1.下载项目代码：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zuiidea/antd-admin.git my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure></p>
<p>2.进入目录安装依赖：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>3.启动本地服务器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></p>
<p>4.启动完成后打开浏览器访问 <a href="http://localhost:7000" target="_blank" rel="noopener">http://localhost:7000</a>，如果需要更改启动端口，可在 .env 文件中配置。</p>
<p>启动完成后可以看到如下界面：<br><img src="https://s2.ax1x.com/2020/02/12/1H9pqg.png" alt="1H9pqg.png"><br>输入账号密码： admin   admin<br>就可以看到如下界面：<br><img src="https://s2.ax1x.com/2020/02/12/1H9Gz6.png" alt="1H9Gz6.png"></p>
<h4 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── dist/               # 默认build输出目录</span><br><span class="line">├── mock/               # Mock文件目录</span><br><span class="line">├── public/             # 静态资源文件目录</span><br><span class="line">├── src/                # 源码目录</span><br><span class="line">│ ├── components/       # 组件目录</span><br><span class="line">│ ├── e2e/              # e2e目录</span><br><span class="line">│ ├── layouts/          # 布局目录</span><br><span class="line">│ ├── locales/          # 国际化文件目录</span><br><span class="line">│ ├── models/           # 数据模型目录</span><br><span class="line">│ ├── pages/            # 页面组件目录</span><br><span class="line">│ ├── services/         # 数据接口目录</span><br><span class="line">│ │ ├── api.js          # 接口配置</span><br><span class="line">│ │ └── index.js        # 接口输出</span><br><span class="line">│ ├── themes/           # 项目样式目录</span><br><span class="line">│ │ ├── default.less    # 样式变量</span><br><span class="line">│ │ ├── index.less      # 全局样式</span><br><span class="line">│ │ ├── mixin.less      # 样式函数</span><br><span class="line">│ │ └── vars.less       # 样式变量及函数</span><br><span class="line">│ ├── utils/            # 工具函数目录</span><br><span class="line">│ │ ├── config.js       # 项目配置</span><br><span class="line">│ │ ├── constant.js     # 静态常量</span><br><span class="line">│ │ ├── index.js        # 工具函数</span><br><span class="line">│ │ ├── request.js      # 异步请求函数(axios)</span><br><span class="line">│ │ └── theme.js        # 项目需要在js中使用到样式变量</span><br><span class="line">├── .editorconfig       # 编辑器配置</span><br><span class="line">├── .env                # 环境变量</span><br><span class="line">├── .eslintrc           # ESlint配置</span><br><span class="line">├── .gitignore          # Git忽略文件配置</span><br><span class="line">├── .prettierignore     # Prettier忽略文件配置</span><br><span class="line">├── .prettierrc         # Prettier配置</span><br><span class="line">├── .stylelintrc.json   # Stylelint配置</span><br><span class="line">├── .travis.yml         # Travis配置</span><br><span class="line">└── .umirc.js           # Umi配置</span><br><span class="line">└──  package.json       # 项目信息</span><br></pre></td></tr></table></figure>
<p>我们主要的目录是在 ~/src/pages 这个目录中。</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>React</tag>
        <tag>umi.js</tag>
      </tags>
  </entry>
  <entry>
    <title>修改lamp.sh使之可以支持多版本PHP</title>
    <url>/2020/01/05/%E4%BF%AE%E6%94%B9lamp-sh%E4%BD%BF%E4%B9%8B%E5%8F%AF%E4%BB%A5%E6%94%AF%E6%8C%81%E5%A4%9A%E7%89%88%E6%9C%ACphp/</url>
    <content><![CDATA[<p>因为公司的新的业务需要安装 PHP7 以上的版本，但是如果自己直接使用源码安装的话，可能会有一些依赖忘记安装，或者版本不兼容的问题。而且，使用 百度 搜索出来的又千篇一律抄来抄去根本不具有什么参考价值。<br>所以，我想到了使用别人写好的shell来安装。经过别人的推荐我知道了 <a href="!https://lamp.sh">lamp.sh</a></p>
<p>lamp.sh 是一款使用 Linux Shell 编写的可以在多种系统上运行的 LAMP(Linux + Apache + MySQL + PHP) 安装包。</p>
<p>他有非常多的优点，但有一点是它只允许一种版本的 PHP 在系统上。这个与我的需求有些许的不同。如果直接用它会直接删除我原来的 PHP 版本。于是，我的它源码进行了一些改动，使他只下载新的 PHP 而不删除我原来的版本。</p>
<p><a href="!https://github.com/hetaoov/lamp">代码地址</a></p>
<p>使用方法：</p>
<ul>
<li><p>下载 lamp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hetaoov/lamp.git</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>安装<br>如果你的系统是Amazon Linux/CentOS/Fedora</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget screen git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/teddysun/lamp.git</span><br><span class="line"><span class="built_in">cd</span> lamp</span><br><span class="line">chmod 755 *.sh</span><br><span class="line">screen -S lamp</span><br><span class="line">./lamp --option_php 1|2|3|4|5|6</span><br></pre></td></tr></table></figure>
<p>如果你的系统是: Debian/Ubuntu：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget screen git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/teddysun/lamp.git</span><br><span class="line"><span class="built_in">cd</span> lamp</span><br><span class="line">chmod 755 *.sh</span><br><span class="line">screen -S lamp</span><br><span class="line">./lamp --option_php 1|2|3|4|5|6</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p> 　　上面 1-5对应的 PHP 版本依次为 PHP5.6,PHP7.0,PHP7.1,PHP7.2,PHP7.3；6 为不安装</p>
<ul>
<li>安装完的目录<br>安装完成后的默认目录在 /usr/local/php@version 目录下<br>例如：安装的是7.1版本 则对应的目录为 /usr/local/php@71</li>
</ul>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>lamp</tag>
      </tags>
  </entry>
  <entry>
    <title>仿 swoole 初始化回调实现</title>
    <url>/2019/04/05/%E4%BB%BF-swoole-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9B%9E%E8%B0%83%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>  <a href="https://www.swoole.com/" target="_blank" rel="noopener">Swoole</a>：面向生产环境的 PHP 异步网络通信引。</p>
<p>  是PHPer进阶的必备技能，但是像我这种初学者，对于 PHP 面向对象了解不深的人，Swoole 的官方文档一下就看懵了。所以，我花了一些时间，写了一个 Swoole 的初始化回调，来学习 PHP 的更高级的用法（高级:是相对于只知道 CRUD 来说）。</p>
  <font color="#dd0000">*本文只涉及面向对象的回调实现！！！！！！</font><br><br>  <font color="#dd0000">*本文代码只是猜想，并不是源码分析！！！！！！</font>

<h2 id="官方示例代码"><a href="#官方示例代码" class="headerlink" title="官方示例代码"></a>官方示例代码</h2>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$http = <span class="keyword">new</span> swoole_http_server(<span class="string">"127.0.0.1"</span>, <span class="number">9501</span>);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(<span class="string">"start"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($server)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Swoole http server is started at http://127.0.0.1:9501\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(<span class="string">"request"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">    $response-&gt;header(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">    $response-&gt;end(<span class="string">"Hello World\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure>
<h3 id="01-问题"><a href="#01-问题" class="headerlink" title="01 问题"></a>01 问题</h3><p>  调用 $http-&gt;on(); 之后,有两个参数，一个参数是字符串，一个是回调函数，这两个参数都可以立即。<strong>理解不了的是第二个参数也就是匿名函数中的参数，我们并没有指定。那么是谁帮我们指定的？</strong></p>
<h3 id="02-相关资料"><a href="#02-相关资料" class="headerlink" title="02 相关资料"></a>02 相关资料</h3><p> <a href="https://www.jb51.net/article/136565.htm" target="_blank" rel="noopener">PHP回调函数</a></p>
<h3 id="03-思路"><a href="#03-思路" class="headerlink" title="03 思路"></a>03 思路</h3><p>其实思路就是在 swoole_http_server 中，有个 on 方法。on 方法主要实现为，根据第一个参数来实例化，相应的对象并回调第二个参数，同时，将实例化的对象作为参数传递给回调函数。</p>
<h3 id="04-代码实现"><a href="#04-代码实现" class="headerlink" title="04 代码实现"></a>04 代码实现</h3><p>先实现 swoole_http_server<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">swoole_http_server</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span> <span class="params">($event, $callback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, $event], [$callback]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里只实现 request,因为它有两个参数。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($callback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $request = <span class="keyword">new</span> Request();</span><br><span class="line">        $response = <span class="keyword">new</span> Response();</span><br><span class="line">        call_user_func($callback, $request, $response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Request 类<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">header</span><span class="params">($title)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> $title.PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Response 类<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> $str.PHP_EOL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">$httpServer = <span class="keyword">new</span> swoole_http_server();</span><br><span class="line"></span><br><span class="line">$httpServer-&gt;on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">	$request-&gt;header(<span class="string">'设置了一个title'</span>);  <span class="comment">//输出 设置了一个title</span></span><br><span class="line">	$response-&gt;end(<span class="string">'这里就结束了！！'</span>); <span class="comment">//输出 这里就结束了！！</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="05-总结"><a href="#05-总结" class="headerlink" title="05 总结"></a>05 总结</h3><p>这是我第一次写博客，可能有很多没有写明白的地方，欢迎各路大神拍砖。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>排列组合</title>
    <url>/2021/08/09/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<p>公司的要做一个优惠券的功能，里面用到了排列组合的算法，这里针对不同的需求的一些PHP的代码。</p>
<blockquote>
<p>给出的数字 1，2，3</p>
</blockquote>
<h4 id="需求一"><a href="#需求一" class="headerlink" title="需求一"></a>需求一</h4><p>需要的结构:</p>
<blockquote>
<p>1, 12, 13, 123, 2, 23, 3</p>
</blockquote>
<p>代码实现<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">arrange</span> <span class="params">($arr, $temp_string, &amp;$collect = [], $i = <span class="number">0</span>)</span> <span class="title">use</span> <span class="params">(&amp;$func)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ($temp_string != <span class="string">""</span>)</span><br><span class="line">                $collect []= $temp_string.<span class="string">','</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> ($i; $i&lt;count($arr);$i++) &#123;</span><br><span class="line">                $arrcopy = $arr;</span><br><span class="line">                $elem = array_splice($arrcopy, $i, <span class="number">1</span>); <span class="comment">// removes and returns the i'th element</span></span><br><span class="line">                <span class="keyword">if</span> (count($arrcopy) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    arrange($arrcopy, $temp_string .<span class="string">","</span> . $elem[<span class="number">0</span>], $collect, $i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $collect []= $temp_string. <span class="string">","</span> . $elem[<span class="number">0</span>].<span class="string">','</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">arrange([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">''</span>, $result);</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
